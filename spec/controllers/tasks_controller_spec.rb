require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe PersonalAccount::TasksController, type: :controller do

  let(:user) { create(:user) }

  # This should return the minimal set of attributes required to create a valid
  # Task. As you add validations to Task, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {name: 'TestName', description: 'This should return the minimal set of attributes required to create a valid'}
  }

  let(:invalid_attributes) {
    attributes_for(:task, name: nil)
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TasksController. Be sure to keep this updated too.
  let(:valid_session) {
    {user_id: user.id}
  }

  # GET #index
  # ----------------------------------------------------------------------------------------------------
  describe 'GET #index' do
    it 'assigns all tasks as @tasks' do
      task = create(:task, user: user)
      get :index, {}, valid_session
      expect(assigns(:tasks)).to eq([task])
    end
  end

  # GET #show
  # ----------------------------------------------------------------------------------------------------
  describe 'GET #show' do
    it 'assigns the requested task as @task' do
      task = create(:task, user: user)
      get :show, {id: task.to_param}, valid_session
      expect(assigns(:task)).to eq(task)
    end
  end

  # GET #new
  # ----------------------------------------------------------------------------------------------------
  describe 'GET #new' do
    it 'assigns a new task as @task' do
      get :new, {}, valid_session
      expect(assigns(:task)).to be_a_new(Task)
    end
  end

  # GET #edit
  # ----------------------------------------------------------------------------------------------------
  describe 'GET #edit' do
    it 'assigns the requested task as @task' do
      task = create(:task, user: user)
      get :edit, {id: task.to_param}, valid_session
      expect(assigns(:task)).to eq(task)
    end
  end

  # POST #create
  # ----------------------------------------------------------------------------------------------------
  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Task' do
        expect {
          post :create, {task: valid_attributes}, valid_session
        }.to change(Task, :count).by(1)
      end

      it 'assigns a newly created task as @task' do
        post :create, {task: valid_attributes}, valid_session
        expect(assigns(:task)).to be_a(Task)
        expect(assigns(:task)).to be_persisted
      end
    end

    context 'with invalid params' do
      it 'assigns a newly created but unsaved task as @task' do
        post :create, {task: invalid_attributes}, valid_session
        expect(assigns(:task)).to be_a_new(Task)
      end
    end
  end

  # PUT #update
  # ----------------------------------------------------------------------------------------------------
  describe 'PUT #update' do

    before(:each) do
      @task = create(:task, user: user)
    end

    context 'with valid params' do
      it 'updates the requested task' do
        put :update, {id: @task.to_param, task: valid_attributes}, valid_session
        @task.reload
        expect(@task.name).to eq(valid_attributes[:name])
      end

      it 'assigns the requested task as @task' do
        put :update, {id: @task.to_param, task: valid_attributes}, valid_session
        expect(assigns(:task)).to eq(@task)
      end
    end

    context 'with invalid params' do
      it 'assigns the task as @task' do
        put :update, {id: @task.to_param, task: invalid_attributes}, valid_session
        expect(assigns(:task)).to eq(@task)
      end
    end
  end

  # DELETE #destroy
  # ----------------------------------------------------------------------------------------------------
  describe 'DELETE #destroy' do
    before(:each) do
      @task = create(:task, user: user)
    end

    it 'destroys the requested task' do
      expect {
        delete :destroy, {id: @task.to_param}, valid_session
      }.to change(Task, :count).by(-1)
    end
  end

  context '#html' do
    describe 'POST #create' do
      context 'with valid params' do
        it 'redirects to the created task' do
          post :create, {task: valid_attributes}, valid_session
          expect(response).to redirect_to(personal_account_task_path(Task.last))
        end

        it 'sets flash notice' do
          post :create, {task: valid_attributes}, valid_session
          expect(controller).to set_flash[:notice].to(I18n.t('controller_messages.crud.create.success', model: 'Task'))
        end
      end

      context 'with invalid params' do
        it 're-renders the :new template' do
          post :create, {task: invalid_attributes}, valid_session
          expect(response).to render_template(:new)
        end
      end
    end

    describe 'PUT #update' do
      before(:each) do
        @task = create(:task, user: user)
      end

      context 'with valid params' do
        it 'redirects to the task' do
          put :update, {id: @task.to_param, task: valid_attributes}, valid_session
          expect(response).to redirect_to(personal_account_task_path(@task))
        end

        it 'sets flash notice' do
          put :update, {id: @task.to_param, task: valid_attributes}, valid_session
          expect(controller).to set_flash[:notice].to(I18n.t('controller_messages.crud.update.success', model: 'Task'))
        end
      end

      context 'with invalid params' do
        it 're-renders the :edit template' do
          put :update, {id: @task.to_param, task: invalid_attributes}, valid_session
          expect(response).to render_template(:edit)
        end
      end
    end

    describe 'DELETE #destroy' do
      before(:each) do
        @task = create(:task, user: user)
      end
      it 'redirects to the tasks list' do
        delete :destroy, {id: @task.to_param}, valid_session
        expect(response).to redirect_to(personal_account_tasks_path)
      end
      it 'sets flash notice' do
        delete :destroy, {id: @task.to_param}, valid_session
        expect(controller).to set_flash[:notice].to(I18n.t('controller_messages.crud.destroy.success', model: 'Task'))
      end
    end
  end

  context '#json' do
    describe 'POST #create' do
      context 'with valid params' do
        it 'responds with status :created' do
          post :create, {task: valid_attributes, format: :json}, valid_session
          expect(response).to have_http_status(:created)
        end
      end

      context 'with invalid params' do
        it 'responds with status unprocessable_entity' do
          post :create, {task: invalid_attributes, format: :json}, valid_session
          expect(response).to have_http_status(:unprocessable_entity)
        end

        it 'returns @task errors json' do
          post :create, {task: invalid_attributes, format: :json}, valid_session
          expect(response.body).to eq(assigns[:task].errors.to_json)
        end
      end
    end

    describe 'PUT #update' do
      before(:each) do
        @task = create(:task, user: user)
      end

      context 'with valid params' do
        it 'responds with status ok' do
          put :update, {id: @task.to_param, task: valid_attributes, format: :json}, valid_session
          expect(response).to have_http_status(:ok)
        end
      end

      context 'with invalid params' do
        it 'responds with status unprocessable_entity' do
          put :update, {id: @task.to_param, task: invalid_attributes, format: :json}, valid_session
          expect(response).to have_http_status(:unprocessable_entity)
        end
        it 'returns @task errors json' do
          put :update, {id: @task.to_param, task: invalid_attributes, format: :json}, valid_session
          expect(response.body).to eq(assigns[:task].errors.to_json)
        end
      end
    end

    describe 'DELETE #destroy' do
      before(:each) do
        @task = create(:task, user: user)
      end
      it 'responds with status 204' do
        delete :destroy, {id: @task.to_param, format: :json}, valid_session
        expect(response).to have_http_status(204)
      end
    end
  end
end
